{
	"info": {
		"_postman_id": "ed0f2570-389d-48a7-8ad4-31b574448008",
		"name": "Vias",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Peticiones",
			"item": [
				{
					"name": "Ayudante",
					"item": [
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insertRequestBody = ",
											"{",
                                            "  \"intCedula\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"\",",
                                            "  \"strEstado\" : \"\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insertRequestBody\", JSON.stringify(insertRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insertRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateRequestBody =",
											"{",
                                            "  \"intCedula\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"S12\",",
                                            "  \"strEstado\" : \"S12\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"updateRequestBody\", JSON.stringify(updateRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updateRequestBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda no está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).not.be.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Lista está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('FolderName', 'Ayudante');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "Cliente",
					"item": [
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insertRequestBody = ",
											"{",
                                            "  \"strNit\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"\",",
                                            "  \"strDireccion\" : \"\",",
                                            "  \"strTelefono\" : \"\",",
                                            "  \"strFax\" : \"\",",
                                            "  \"strObservaciones\" : \"\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insertRequestBody\", JSON.stringify(insertRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insertRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateRequestBody =",
											"{",
                                            "  \"strNit\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"S12\",",
                                            "  \"strDireccion\" : \"S12\",",
                                            "  \"strTelefono\" : \"S12\",",
                                            "  \"strFax\" : \"S12\",",
                                            "  \"strObservaciones\" : \"S12\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"updateRequestBody\", JSON.stringify(updateRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updateRequestBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda no está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).not.be.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Lista está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('FolderName', 'Cliente');",
									"pm.globals.set('id', '10L');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "CodigoIdentificacionVial",
					"item": [
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insertRequestBody = ",
											"{",
                                            "  \"strCiv\" : \"{{id}}\",",
                                            "  \"strNombreEjeVia\" : \"\",",
                                            "  \"strNombreExtremoInicial\" : \"\",",
                                            "  \"strNombreExtremoFinal\" : \"\",",
                                            "  \"strTipoMalla\" : \"\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insertRequestBody\", JSON.stringify(insertRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insertRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateRequestBody =",
											"{",
                                            "  \"strCiv\" : \"{{id}}\",",
                                            "  \"strNombreEjeVia\" : \"S12\",",
                                            "  \"strNombreExtremoInicial\" : \"S12\",",
                                            "  \"strNombreExtremoFinal\" : \"S12\",",
                                            "  \"strTipoMalla\" : \"S12\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"updateRequestBody\", JSON.stringify(updateRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updateRequestBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda no está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).not.be.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Lista está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('FolderName', 'CodigoIdentificacionVial');",
									"pm.globals.set('id', '10L');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "Conductor",
					"item": [
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insertRequestBody = ",
											"{",
                                            "  \"intCedula\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"\",",
                                            "  \"strEstado\" : \"\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insertRequestBody\", JSON.stringify(insertRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insertRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateRequestBody =",
											"{",
                                            "  \"intCedula\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"S12\",",
                                            "  \"strEstado\" : \"S12\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"updateRequestBody\", JSON.stringify(updateRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updateRequestBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda no está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).not.be.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Lista está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('FolderName', 'Conductor');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "Configuracion",
					"item": [
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insertRequestBody = ",
											"{",
                                            "  \"strCodigo\" : \"{{id}}\",",
                                            "  \"strParametro\" : \"\",",
                                            "  \"strValor\" : \"\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insertRequestBody\", JSON.stringify(insertRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insertRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateRequestBody =",
											"{",
                                            "  \"strCodigo\" : \"{{id}}\",",
                                            "  \"strParametro\" : \"S12\",",
                                            "  \"strValor\" : \"S12\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"updateRequestBody\", JSON.stringify(updateRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updateRequestBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda no está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).not.be.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Lista está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('FolderName', 'Configuracion');",
									"pm.globals.set('id', '10L');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "Despacho",
					"item": [
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insertRequestBody = ",
											"{",
                                            "  \"intNoTiquete\" : \"{{id}}\",",
                                            "  \"strPlaca\" : \"\",",
                                            "  \"strConductor\" : \"\",",
                                            "  \"intCedula\" : -1,",
                                            "  \"strProducto\" : \"\",",
                                            "  \"strFechaEntrada\" : \"\",",
                                            "  \"strHoraEntrada\" : \"\",",
                                            "  \"strFechaPesoVacio\" : \"\",",
                                            "  \"strHoraPesoVacio\" : \"\",",
                                            "  \"strFechaDespachoPlanta\" : \"\",",
                                            "  \"strHoraDespachoPlanta\" : \"\",",
                                            "  \"strFechaPesoLleno\" : \"\",",
                                            "  \"strHoraPesoLleno\" : \"\",",
                                            "  \"strFechaSalida\" : \"\",",
                                            "  \"strHoraSalida\" : \"\",",
                                            "  \"intBruto\" : -1,",
                                            "  \"intTara\" : -1,",
                                            "  \"intNeto\" : -1,",
                                            "  \"strNoShipment\" : \"\",",
                                            "  \"strNoSello\" : \"\",",
                                            "  \"strNoR\" : \"\",",
                                            "  \"strNoContenedor\" : \"\",",
                                            "  \"strOperario\" : \"\",",
                                            "  \"strNickOperario\" : \"\",",
                                            "  \"strObservaciones\" : \"\",",
                                            "  \"strNoInterno\" : \"\",",
                                            "  \"strCodigo\" : \"\",",
                                            "  \"strTipoVehiculo\" : \"\",",
                                            "  \"strTipoProducto\" : \"\",",
                                            "  \"strDireccion\" : \"\",",
                                            "  \"strEntregadoPor\" : \"\",",
                                            "  \"strRecibidoPor\" : \"\",",
                                            "  \"strUnidad\" : \"\",",
                                            "  \"strVolumen\" : \"\"",
                                            "  /*",
                                            "  \"strCiv\" : \"\",",
                                            "  \"strIdProducto\" : \"\",",
                                            "  \"strDestino\" : \"\",",
                                            "  \"strCliente\" : \"\",",
                                            "  \"strPlanta\" : \"\",",
                                            "  \"strTransportadora\" : \"\"",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insertRequestBody\", JSON.stringify(insertRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insertRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateRequestBody =",
											"{",
                                            "  \"intNoTiquete\" : \"{{id}}\",",
                                            "  \"strPlaca\" : \"S12\",",
                                            "  \"strConductor\" : \"S12\",",
                                            "  \"intCedula\" : 102,",
                                            "  \"strProducto\" : \"S12\",",
                                            "  \"strFechaEntrada\" : \"S12\",",
                                            "  \"strHoraEntrada\" : \"S12\",",
                                            "  \"strFechaPesoVacio\" : \"S12\",",
                                            "  \"strHoraPesoVacio\" : \"S12\",",
                                            "  \"strFechaDespachoPlanta\" : \"S12\",",
                                            "  \"strHoraDespachoPlanta\" : \"S12\",",
                                            "  \"strFechaPesoLleno\" : \"S12\",",
                                            "  \"strHoraPesoLleno\" : \"S12\",",
                                            "  \"strFechaSalida\" : \"S12\",",
                                            "  \"strHoraSalida\" : \"S12\",",
                                            "  \"intBruto\" : 102,",
                                            "  \"intTara\" : 102,",
                                            "  \"intNeto\" : 102,",
                                            "  \"strNoShipment\" : \"S12\",",
                                            "  \"strNoSello\" : \"S12\",",
                                            "  \"strNoR\" : \"S12\",",
                                            "  \"strNoContenedor\" : \"S12\",",
                                            "  \"strOperario\" : \"S12\",",
                                            "  \"strNickOperario\" : \"S12\",",
                                            "  \"strObservaciones\" : \"S12\",",
                                            "  \"strNoInterno\" : \"S12\",",
                                            "  \"strCodigo\" : \"S12\",",
                                            "  \"strTipoVehiculo\" : \"S12\",",
                                            "  \"strTipoProducto\" : \"S12\",",
                                            "  \"strDireccion\" : \"S12\",",
                                            "  \"strEntregadoPor\" : \"S12\",",
                                            "  \"strRecibidoPor\" : \"S12\",",
                                            "  \"strUnidad\" : \"S12\",",
                                            "  \"strVolumen\" : \"S12\"",
                                            "  /*",
                                            "  \"strCiv\" : \"S12\",",
                                            "  \"strIdProducto\" : \"S12\",",
                                            "  \"strDestino\" : \"S12\",",
                                            "  \"strCliente\" : \"S12\",",
                                            "  \"strPlanta\" : \"S12\",",
                                            "  \"strTransportadora\" : \"S12\"",
                                            "  */",
                                            "}",
											"pm.environment.set(\"updateRequestBody\", JSON.stringify(updateRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updateRequestBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda no está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).not.be.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Lista está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('FolderName', 'Despacho');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "Destino",
					"item": [
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insertRequestBody = ",
											"{",
                                            "  \"strCodigo\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"\",",
                                            "  \"strDetalles\" : \"\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insertRequestBody\", JSON.stringify(insertRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insertRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateRequestBody =",
											"{",
                                            "  \"strCodigo\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"S12\",",
                                            "  \"strDetalles\" : \"S12\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"updateRequestBody\", JSON.stringify(updateRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updateRequestBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda no está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).not.be.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Lista está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('FolderName', 'Destino');",
									"pm.globals.set('id', '10L');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "Indicador",
					"item": [
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insertRequestBody = ",
											"{",
                                            "  \"strCodigo\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"\",",
                                            "  \"strTamanoTrama\" : \"\",",
                                            "  \"strPosicionInicialPeso\" : \"\",",
                                            "  \"strTotalDatosPeso\" : \"\",",
                                            "  \"strCaracterFinTrama\" : \"\",",
                                            "  \"strCaracterInicioTrama\" : \"\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insertRequestBody\", JSON.stringify(insertRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insertRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateRequestBody =",
											"{",
                                            "  \"strCodigo\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"S12\",",
                                            "  \"strTamanoTrama\" : \"S12\",",
                                            "  \"strPosicionInicialPeso\" : \"S12\",",
                                            "  \"strTotalDatosPeso\" : \"S12\",",
                                            "  \"strCaracterFinTrama\" : \"S12\",",
                                            "  \"strCaracterInicioTrama\" : \"S12\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"updateRequestBody\", JSON.stringify(updateRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updateRequestBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda no está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).not.be.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Lista está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('FolderName', 'Indicador');",
									"pm.globals.set('id', '10L');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "Ingreso",
					"item": [
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insertRequestBody = ",
											"{",
                                            "  \"intNoTiquete\" : \"{{id}}\",",
                                            "  \"strPlaca\" : \"\",",
                                            "  \"strConductor\" : \"\",",
                                            "  \"intCedula\" : -1,",
                                            "  \"strProveedor\" : \"\",",
                                            "  \"strFechaEntrada\" : \"\",",
                                            "  \"strHoraEntrada\" : \"\",",
                                            "  \"strFechaPesoVacio\" : \"\",",
                                            "  \"strHoraPesoVacio\" : \"\",",
                                            "  \"strFechaDespachoPlanta\" : \"\",",
                                            "  \"strHoraDespachoPlanta\" : \"\",",
                                            "  \"strFechaPesoLleno\" : \"\",",
                                            "  \"strHoraPesoLleno\" : \"\",",
                                            "  \"strFechaSalida\" : \"\",",
                                            "  \"strHoraSalida\" : \"\",",
                                            "  \"intBruto\" : -1,",
                                            "  \"intTara\" : -1,",
                                            "  \"intNeto\" : -1,",
                                            "  \"strNoShipment\" : \"\",",
                                            "  \"strNoSello\" : \"\",",
                                            "  \"strNoR\" : \"\",",
                                            "  \"strNoContenedor\" : \"\",",
                                            "  \"strOperario\" : \"\",",
                                            "  \"strNickOperario\" : \"\",",
                                            "  \"strObservaciones\" : \"\",",
                                            "  \"strNoInterno\" : \"\",",
                                            "  \"strCodigo\" : \"\",",
                                            "  \"strTipoVehiculo\" : \"\",",
                                            "  \"strTipoProducto\" : \"\",",
                                            "  \"strDireccion\" : \"\",",
                                            "  \"strEntregadoPor\" : \"\",",
                                            "  \"strRecibidoPor\" : \"\",",
                                            "  \"strUnidad\" : \"\",",
                                            "  \"strVolumen\" : \"\"",
                                            "  /*",
                                            "  \"strMateriaPrima\" : \"\",",
                                            "  \"strPlanta\" : \"\",",
                                            "  \"strTransportadora\" : \"\",",
                                            "  \"strOrigen\" : \"\"",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insertRequestBody\", JSON.stringify(insertRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insertRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateRequestBody =",
											"{",
                                            "  \"intNoTiquete\" : \"{{id}}\",",
                                            "  \"strPlaca\" : \"S12\",",
                                            "  \"strConductor\" : \"S12\",",
                                            "  \"intCedula\" : 102,",
                                            "  \"strProveedor\" : \"S12\",",
                                            "  \"strFechaEntrada\" : \"S12\",",
                                            "  \"strHoraEntrada\" : \"S12\",",
                                            "  \"strFechaPesoVacio\" : \"S12\",",
                                            "  \"strHoraPesoVacio\" : \"S12\",",
                                            "  \"strFechaDespachoPlanta\" : \"S12\",",
                                            "  \"strHoraDespachoPlanta\" : \"S12\",",
                                            "  \"strFechaPesoLleno\" : \"S12\",",
                                            "  \"strHoraPesoLleno\" : \"S12\",",
                                            "  \"strFechaSalida\" : \"S12\",",
                                            "  \"strHoraSalida\" : \"S12\",",
                                            "  \"intBruto\" : 102,",
                                            "  \"intTara\" : 102,",
                                            "  \"intNeto\" : 102,",
                                            "  \"strNoShipment\" : \"S12\",",
                                            "  \"strNoSello\" : \"S12\",",
                                            "  \"strNoR\" : \"S12\",",
                                            "  \"strNoContenedor\" : \"S12\",",
                                            "  \"strOperario\" : \"S12\",",
                                            "  \"strNickOperario\" : \"S12\",",
                                            "  \"strObservaciones\" : \"S12\",",
                                            "  \"strNoInterno\" : \"S12\",",
                                            "  \"strCodigo\" : \"S12\",",
                                            "  \"strTipoVehiculo\" : \"S12\",",
                                            "  \"strTipoProducto\" : \"S12\",",
                                            "  \"strDireccion\" : \"S12\",",
                                            "  \"strEntregadoPor\" : \"S12\",",
                                            "  \"strRecibidoPor\" : \"S12\",",
                                            "  \"strUnidad\" : \"S12\",",
                                            "  \"strVolumen\" : \"S12\"",
                                            "  /*",
                                            "  \"strMateriaPrima\" : \"S12\",",
                                            "  \"strPlanta\" : \"S12\",",
                                            "  \"strTransportadora\" : \"S12\",",
                                            "  \"strOrigen\" : \"S12\"",
                                            "  */",
                                            "}",
											"pm.environment.set(\"updateRequestBody\", JSON.stringify(updateRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updateRequestBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda no está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).not.be.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Lista está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('FolderName', 'Ingreso');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "MateriaPrima",
					"item": [
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insertRequestBody = ",
											"{",
                                            "  \"strCodigo\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"\",",
                                            "  \"strDetalles\" : \"\",",
                                            "  \"strTipo\" : \"\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insertRequestBody\", JSON.stringify(insertRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insertRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateRequestBody =",
											"{",
                                            "  \"strCodigo\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"S12\",",
                                            "  \"strDetalles\" : \"S12\",",
                                            "  \"strTipo\" : \"S12\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"updateRequestBody\", JSON.stringify(updateRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updateRequestBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda no está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).not.be.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Lista está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('FolderName', 'MateriaPrima');",
									"pm.globals.set('id', '10L');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "Origen",
					"item": [
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insertRequestBody = ",
											"{",
                                            "  \"strCodigo\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"\",",
                                            "  \"strDetalles\" : \"\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insertRequestBody\", JSON.stringify(insertRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insertRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateRequestBody =",
											"{",
                                            "  \"strCodigo\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"S12\",",
                                            "  \"strDetalles\" : \"S12\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"updateRequestBody\", JSON.stringify(updateRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updateRequestBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda no está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).not.be.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Lista está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('FolderName', 'Origen');",
									"pm.globals.set('id', '10L');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "Planta",
					"item": [
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insertRequestBody = ",
											"{",
                                            "  \"strCodigo\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"\",",
                                            "  \"strDetalles\" : \"\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insertRequestBody\", JSON.stringify(insertRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insertRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateRequestBody =",
											"{",
                                            "  \"strCodigo\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"S12\",",
                                            "  \"strDetalles\" : \"S12\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"updateRequestBody\", JSON.stringify(updateRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updateRequestBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda no está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).not.be.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Lista está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('FolderName', 'Planta');",
									"pm.globals.set('id', '10L');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "Producto",
					"item": [
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insertRequestBody = ",
											"{",
                                            "  \"strCodigo\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"\",",
                                            "  \"strDetalles\" : \"\",",
                                            "  \"strTipo\" : \"\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insertRequestBody\", JSON.stringify(insertRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insertRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateRequestBody =",
											"{",
                                            "  \"strCodigo\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"S12\",",
                                            "  \"strDetalles\" : \"S12\",",
                                            "  \"strTipo\" : \"S12\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"updateRequestBody\", JSON.stringify(updateRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updateRequestBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda no está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).not.be.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Lista está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('FolderName', 'Producto');",
									"pm.globals.set('id', '10L');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "Proveedor",
					"item": [
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insertRequestBody = ",
											"{",
                                            "  \"strNit\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"\",",
                                            "  \"strDireccion\" : \"\",",
                                            "  \"strTelefono\" : \"\",",
                                            "  \"strFax\" : \"\",",
                                            "  \"strObservaciones\" : \"\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insertRequestBody\", JSON.stringify(insertRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insertRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateRequestBody =",
											"{",
                                            "  \"strNit\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"S12\",",
                                            "  \"strDireccion\" : \"S12\",",
                                            "  \"strTelefono\" : \"S12\",",
                                            "  \"strFax\" : \"S12\",",
                                            "  \"strObservaciones\" : \"S12\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"updateRequestBody\", JSON.stringify(updateRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updateRequestBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda no está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).not.be.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Lista está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('FolderName', 'Proveedor');",
									"pm.globals.set('id', '10L');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "RegistroEliminado",
					"item": [
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insertRequestBody = ",
											"{",
                                            "  \"strPlaca\" : \"{{id}}\",",
                                            "  \"strCaso\" : \"\",",
                                            "  \"strConductor\" : \"\",",
                                            "  \"intCedula\" : -1,",
                                            "  \"strMateriaPrimaProducto\" : \"\",",
                                            "  \"strClienteProveedor\" : \"\",",
                                            "  \"strOrigenDestino\" : \"\",",
                                            "  \"strFechaEntrada\" : \"\",",
                                            "  \"strHoraEntrada\" : \"\",",
                                            "  \"strFechaPesoVacio\" : \"\",",
                                            "  \"strHoraPesoVacio\" : \"\",",
                                            "  \"strFechaDespachoPlanta\" : \"\",",
                                            "  \"strHoraDespachoPlanta\" : \"\",",
                                            "  \"strFechaPesoLleno\" : \"\",",
                                            "  \"strHoraPesoLleno\" : \"\",",
                                            "  \"strFechaSalida\" : \"\",",
                                            "  \"strHoraSalida\" : \"\",",
                                            "  \"intBruto\" : -1,",
                                            "  \"intTara\" : -1,",
                                            "  \"intNeto\" : -1,",
                                            "  \"strNoShipment\" : \"\",",
                                            "  \"strNoSello\" : \"\",",
                                            "  \"strNoR\" : \"\",",
                                            "  \"strNoContenedor\" : \"\",",
                                            "  \"strOperario\" : \"\",",
                                            "  \"strNickOperario\" : \"\",",
                                            "  \"strObservaciones\" : \"\"",
                                            "  /*",
                                            "  \"strTransportadora\" : \"\",",
                                            "  \"strPlanta\" : \"\"",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insertRequestBody\", JSON.stringify(insertRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insertRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateRequestBody =",
											"{",
                                            "  \"strPlaca\" : \"{{id}}\",",
                                            "  \"strCaso\" : \"S12\",",
                                            "  \"strConductor\" : \"S12\",",
                                            "  \"intCedula\" : 102,",
                                            "  \"strMateriaPrimaProducto\" : \"S12\",",
                                            "  \"strClienteProveedor\" : \"S12\",",
                                            "  \"strOrigenDestino\" : \"S12\",",
                                            "  \"strFechaEntrada\" : \"S12\",",
                                            "  \"strHoraEntrada\" : \"S12\",",
                                            "  \"strFechaPesoVacio\" : \"S12\",",
                                            "  \"strHoraPesoVacio\" : \"S12\",",
                                            "  \"strFechaDespachoPlanta\" : \"S12\",",
                                            "  \"strHoraDespachoPlanta\" : \"S12\",",
                                            "  \"strFechaPesoLleno\" : \"S12\",",
                                            "  \"strHoraPesoLleno\" : \"S12\",",
                                            "  \"strFechaSalida\" : \"S12\",",
                                            "  \"strHoraSalida\" : \"S12\",",
                                            "  \"intBruto\" : 102,",
                                            "  \"intTara\" : 102,",
                                            "  \"intNeto\" : 102,",
                                            "  \"strNoShipment\" : \"S12\",",
                                            "  \"strNoSello\" : \"S12\",",
                                            "  \"strNoR\" : \"S12\",",
                                            "  \"strNoContenedor\" : \"S12\",",
                                            "  \"strOperario\" : \"S12\",",
                                            "  \"strNickOperario\" : \"S12\",",
                                            "  \"strObservaciones\" : \"S12\"",
                                            "  /*",
                                            "  \"strTransportadora\" : \"S12\",",
                                            "  \"strPlanta\" : \"S12\"",
                                            "  */",
                                            "}",
											"pm.environment.set(\"updateRequestBody\", JSON.stringify(updateRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updateRequestBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda no está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).not.be.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Lista está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('FolderName', 'RegistroEliminado');",
									"pm.globals.set('id', '10L');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "Transportadora",
					"item": [
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insertRequestBody = ",
											"{",
                                            "  \"strNombre\" : \"{{id}}\",",
                                            "  \"strNit\" : \"\",",
                                            "  \"strDireccion\" : \"\",",
                                            "  \"strTelefono\" : \"\",",
                                            "  \"strFax\" : \"\",",
                                            "  \"strObservaciones\" : \"\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insertRequestBody\", JSON.stringify(insertRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insertRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateRequestBody =",
											"{",
                                            "  \"strNombre\" : \"{{id}}\",",
                                            "  \"strNit\" : \"S12\",",
                                            "  \"strDireccion\" : \"S12\",",
                                            "  \"strTelefono\" : \"S12\",",
                                            "  \"strFax\" : \"S12\",",
                                            "  \"strObservaciones\" : \"S12\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"updateRequestBody\", JSON.stringify(updateRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updateRequestBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda no está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).not.be.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Lista está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('FolderName', 'Transportadora');",
									"pm.globals.set('id', '10L');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "Usuario",
					"item": [
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insertRequestBody = ",
											"{",
                                            "  \"intCedula\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"\",",
                                            "  \"strApellido\" : \"\",",
                                            "  \"strNick\" : \"\",",
                                            "  \"strTipo\" : \"\",",
                                            "  \"strPassword\" : \"\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insertRequestBody\", JSON.stringify(insertRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insertRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateRequestBody =",
											"{",
                                            "  \"intCedula\" : \"{{id}}\",",
                                            "  \"strNombre\" : \"S12\",",
                                            "  \"strApellido\" : \"S12\",",
                                            "  \"strNick\" : \"S12\",",
                                            "  \"strTipo\" : \"S12\",",
                                            "  \"strPassword\" : \"S12\"",
                                            "  /*",
                                            "  ",
                                            "  */",
                                            "}",
											"pm.environment.set(\"updateRequestBody\", JSON.stringify(updateRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updateRequestBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda no está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).not.be.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Lista está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('FolderName', 'Usuario');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "VehiculoEnTransito",
					"item": [
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insertRequestBody = ",
											"{",
                                            "  \"strPlaca\" : \"{{id}}\",",
                                            "  \"strCaso\" : \"\",",
                                            "  \"strConductor\" : \"\",",
                                            "  \"intCedula\" : -1,",
                                            "  \"strMateriaPrimaProducto\" : \"\",",
                                            "  \"strClienteProveedor\" : \"\",",
                                            "  \"strOrigenDestino\" : \"\",",
                                            "  \"strFechaEntrada\" : \"\",",
                                            "  \"strHoraEntrada\" : \"\",",
                                            "  \"strFechaPesoVacio\" : \"\",",
                                            "  \"strHoraPesoVacio\" : \"\",",
                                            "  \"strFechaDespachoPlanta\" : \"\",",
                                            "  \"strHoraDespachoPlanta\" : \"\",",
                                            "  \"strFechaPesoLleno\" : \"\",",
                                            "  \"strHoraPesoLleno\" : \"\",",
                                            "  \"strFechaSalida\" : \"\",",
                                            "  \"strHoraSalida\" : \"\",",
                                            "  \"intBruto\" : -1,",
                                            "  \"intTara\" : -1,",
                                            "  \"intNeto\" : -1,",
                                            "  \"intNoTiquete\" : -1,",
                                            "  \"strNoShipment\" : \"\",",
                                            "  \"strNoSello\" : \"\",",
                                            "  \"strNoR\" : \"\",",
                                            "  \"strNoContenedor\" : \"\",",
                                            "  \"strOperario\" : \"\",",
                                            "  \"strNickOperario\" : \"\",",
                                            "  \"strObservaciones\" : \"\",",
                                            "  \"strNoInterno\" : \"\",",
                                            "  \"strTipoVehiculo\" : \"\",",
                                            "  \"strEntregadoPor\" : \"\",",
                                            "  \"strRecibidoPor\" : \"\",",
                                            "  \"strDireccion\" : \"\",",
                                            "  \"strTipoProducto\" : \"\",",
                                            "  \"strUnidad\" : \"\",",
                                            "  \"strVolumen\" : \"\"",
                                            "  /*",
                                            "  \"strCiv\" : \"\",",
                                            "  \"strIdProducto\" : \"\",",
                                            "  \"strIdVehiculo\" : \"\",",
                                            "  \"strPlanta\" : \"\",",
                                            "  \"strTransportadora\" : \"\"",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insertRequestBody\", JSON.stringify(insertRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insertRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateRequestBody =",
											"{",
                                            "  \"strPlaca\" : \"{{id}}\",",
                                            "  \"strCaso\" : \"S12\",",
                                            "  \"strConductor\" : \"S12\",",
                                            "  \"intCedula\" : 102,",
                                            "  \"strMateriaPrimaProducto\" : \"S12\",",
                                            "  \"strClienteProveedor\" : \"S12\",",
                                            "  \"strOrigenDestino\" : \"S12\",",
                                            "  \"strFechaEntrada\" : \"S12\",",
                                            "  \"strHoraEntrada\" : \"S12\",",
                                            "  \"strFechaPesoVacio\" : \"S12\",",
                                            "  \"strHoraPesoVacio\" : \"S12\",",
                                            "  \"strFechaDespachoPlanta\" : \"S12\",",
                                            "  \"strHoraDespachoPlanta\" : \"S12\",",
                                            "  \"strFechaPesoLleno\" : \"S12\",",
                                            "  \"strHoraPesoLleno\" : \"S12\",",
                                            "  \"strFechaSalida\" : \"S12\",",
                                            "  \"strHoraSalida\" : \"S12\",",
                                            "  \"intBruto\" : 102,",
                                            "  \"intTara\" : 102,",
                                            "  \"intNeto\" : 102,",
                                            "  \"intNoTiquete\" : 102,",
                                            "  \"strNoShipment\" : \"S12\",",
                                            "  \"strNoSello\" : \"S12\",",
                                            "  \"strNoR\" : \"S12\",",
                                            "  \"strNoContenedor\" : \"S12\",",
                                            "  \"strOperario\" : \"S12\",",
                                            "  \"strNickOperario\" : \"S12\",",
                                            "  \"strObservaciones\" : \"S12\",",
                                            "  \"strNoInterno\" : \"S12\",",
                                            "  \"strTipoVehiculo\" : \"S12\",",
                                            "  \"strEntregadoPor\" : \"S12\",",
                                            "  \"strRecibidoPor\" : \"S12\",",
                                            "  \"strDireccion\" : \"S12\",",
                                            "  \"strTipoProducto\" : \"S12\",",
                                            "  \"strUnidad\" : \"S12\",",
                                            "  \"strVolumen\" : \"S12\"",
                                            "  /*",
                                            "  \"strCiv\" : \"S12\",",
                                            "  \"strIdProducto\" : \"S12\",",
                                            "  \"strIdVehiculo\" : \"S12\",",
                                            "  \"strPlanta\" : \"S12\",",
                                            "  \"strTransportadora\" : \"S12\"",
                                            "  */",
                                            "}",
											"pm.environment.set(\"updateRequestBody\", JSON.stringify(updateRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updateRequestBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda no está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).not.be.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Lista está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('FolderName', 'VehiculoEnTransito');",
									"pm.globals.set('id', '10L');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "Vehiculo",
					"item": [
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insertRequestBody = ",
											"{",
                                            "  \"strCodigo\" : \"{{id}}\",",
                                            "  \"strPlacaVehiculo\" : \"\",",
                                            "  \"strNumeroInterno\" : \"\",",
                                            "  \"strTara\" : \"\",",
                                            "  \"strEjes\" : \"\",",
                                            "  \"strVolumenVehiculo\" : \"\",",
                                            "  \"strInterno\" : \"\",",
                                            "  \"strPatronado\" : \"\",",
                                            "  \"strObservacion\" : \"\"",
                                            "  /*",
                                            "  \"strIdTransportador\" : \"\"",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insertRequestBody\", JSON.stringify(insertRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insertRequestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"updateRequestBody =",
											"{",
                                            "  \"strCodigo\" : \"{{id}}\",",
                                            "  \"strPlacaVehiculo\" : \"S12\",",
                                            "  \"strNumeroInterno\" : \"S12\",",
                                            "  \"strTara\" : \"S12\",",
                                            "  \"strEjes\" : \"S12\",",
                                            "  \"strVolumenVehiculo\" : \"S12\",",
                                            "  \"strInterno\" : \"S12\",",
                                            "  \"strPatronado\" : \"S12\",",
                                            "  \"strObservacion\" : \"S12\"",
                                            "  /*",
                                            "  \"strIdTransportador\" : \"S12\"",
                                            "  */",
                                            "}",
											"pm.environment.set(\"updateRequestBody\", JSON.stringify(updateRequestBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updateRequestBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Búsqueda no está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).not.be.eql(undefined);",
											"    pm.expect(jsonData.length).not.be.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Body es un array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Lista está vacía.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).be.to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{FolderName}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{FolderName}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('FolderName', 'Vehiculo');",
									"pm.globals.set('id', '10L');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.globals.set('primaryKey', 101);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "protocol",
			"value": "http"
		},
		{
			"key": "host",
			"value": "localhost"
		},
		{
			"key": "port",
			"value": "8080"
		},
		{
			"key": "api",
			"value": "api/v1"
		},
		{
			"key": "pages",
			"value": "pages"
		}
	],
	"protocolProfileBehavior": {}
}